import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from theme_utils import setup_theme
from copy_utils import add_copy_button_to_figure, copy_all_button

def vulnerability_dashboard():
    # Apply the current theme
    plt_style = setup_theme()
    plt.style.use(plt_style)
    
    # Allow users to customize the report period
    report_period = st.text_input("Report Period", "February 2025", key="vulnerability_report_period")
    
    st.markdown(f"<h1 class='main-header'>Vulnerability Analysis Dashboard - {report_period}</h1>", unsafe_allow_html=True)
    
    # Instructions for data input
    with st.expander("ðŸ“‹ Data Input Instructions"):
        st.write("""
        Please enter the following data from your vulnerability reports:
        - Total vulnerabilities and their severity distribution
        - Vulnerability age distribution
        - Top vulnerability types
        - Remediation status
        """)
    
    # Input form for vulnerability data
    with st.form("vulnerability_form"):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            total_vulns = st.number_input("Total Vulnerabilities", min_value=0, value=248, key="vuln_total")
            critical_vulns = st.number_input("Critical Vulnerabilities", min_value=0, value=35, key="vuln_critical")
            high_vulns = st.number_input("High Vulnerabilities", min_value=0, value=78, key="vuln_high")
            medium_vulns = st.number_input("Medium Vulnerabilities", min_value=0, value=95, key="vuln_medium")
            low_vulns = st.number_input("Low Vulnerabilities", min_value=0, value=40, key="vuln_low")
        
        with col2:
            # Age distribution
            gt_90_days = st.number_input("Vulnerabilities > 90 days", min_value=0, value=42, key="vuln_gt_90")
            d30_90_days = st.number_input("Vulnerabilities 30-90 days", min_value=0, value=87, key="vuln_30_90")
            lt_30_days = st.number_input("Vulnerabilities < 30 days", min_value=0, value=119, key="vuln_lt_30")
            
            # Remediation status
            remediated = st.number_input("Remediated Vulnerabilities", min_value=0, value=65, key="vuln_remediated")
            in_progress = st.number_input("In-Progress Remediation", min_value=0, value=98, key="vuln_in_progress")
            not_started = st.number_input("Not Started Remediation", min_value=0, value=85, key="vuln_not_started")
        
        with col3:
            # Vulnerability types
            vuln_types = st.text_area(
                "Vulnerability Types (comma separated)", 
                "Missing Patches, Misconfigurations, Outdated Software, Default Credentials, Unnecessary Services",
                help="Enter values separated by commas, with a space after each comma",
                key="vuln_types"
            )
            vuln_type_counts = st.text_area(
                "Counts (comma separated)", 
                "95, 62, 45, 28, 18",
                help="Enter values separated by commas, with a space after each comma",
                key="vuln_type_counts"
            )
            
            # System names
            system_names = st.text_area(
                "System Names (comma separated)", 
                "Windows Servers, Workstations, Network Devices, Web Applications, Databases",
                help="Enter values separated by commas, with a space after each comma",
                key="vuln_systems"
            )
            system_counts = st.text_area(
                "Counts (comma separated)", 
                "87, 63, 42, 36, 20",
                help="Enter values separated by commas, with a space after each comma",
                key="vuln_system_counts"
            )
        
        submit_button = st.form_submit_button(label="Generate Dashboard")
    
    if submit_button or True:  # For demonstration, always show the dashboard
        # Create DataFrames
        severity_data = {
            'Severity': ['Critical', 'High', 'Medium', 'Low'],
            'Count': [critical_vulns, high_vulns, medium_vulns, low_vulns]
        }
        severity_df = pd.DataFrame(severity_data)
        
        age_data = {
            'Age': ['< 30 days', '30-90 days', '> 90 days'],
            'Count': [lt_30_days, d30_90_days, gt_90_days]
        }
        age_df = pd.DataFrame(age_data)
        
        remediation_data = {
            'Status': ['Remediated', 'In Progress', 'Not Started'],
            'Count': [remediated, in_progress, not_started]
        }
        remediation_df = pd.DataFrame(remediation_data)
        
        vuln_type_list = [t.strip() for t in vuln_types.split(",")]
        vuln_type_count_list = [int(c.strip()) for c in vuln_type_counts.split(",")]
        
        vuln_type_data = {
            'Type': vuln_type_list,
            'Count': vuln_type_count_list
        }
        vuln_type_df = pd.DataFrame(vuln_type_data)
        
        system_list = [s.strip() for s in system_names.split(",")]
        system_count_list = [int(c.strip()) for c in system_counts.split(",")]
        
        system_data = {
            'System': system_list,
            'Count': system_count_list
        }
        system_df = pd.DataFrame(system_data)
        
        # Calculate percentages
        critical_pct = 100 * critical_vulns / total_vulns
        high_pct = 100 * high_vulns / total_vulns
        old_vulns_pct = 100 * gt_90_days / total_vulns
        remediated_pct = 100 * remediated / total_vulns
        in_progress_pct = 100 * in_progress / total_vulns
        
        # Keep track of chart IDs for copy functionality
        chart_ids = []
        
        # Display dashboard
        st.markdown("<h2 class='sub-header'>Vulnerability Overview</h2>", unsafe_allow_html=True)
        
        # Metrics
        metric_col1, metric_col2, metric_col3 = st.columns(3)
        with metric_col1:
            st.markdown(f"""
            <div class='metric-card'>
                <div class='metric-value'>{total_vulns}</div>
                <div class='metric-label'>Total Vulnerabilities</div>
            </div>
            """, unsafe_allow_html=True)
        
        with metric_col2:
            st.markdown(f"""
            <div class='metric-card'>
                <div class='metric-value'>{critical_vulns}</div>
                <div class='metric-label'>Critical Vulnerabilities</div>
            </div>
            """, unsafe_allow_html=True)
        
        with metric_col3:
            st.markdown(f"""
            <div class='metric-card'>
                <div class='metric-value'>{gt_90_days}</div>
                <div class='metric-label'>Vulnerabilities > 90 days</div>
            </div>
            """, unsafe_allow_html=True)
        
        # Severity Distribution
        st.markdown("<h3>Severity Distribution</h3>", unsafe_allow_html=True)
        fig1, ax1 = plt.subplots(figsize=(8, 6))
        colors = ['#e74c3c', '#f39c12', '#3498db', '#2ecc71']
        wedges, texts, autotexts = ax1.pie(
            severity_df['Count'], 
            labels=severity_df['Severity'], 
            autopct='%1.1f%%',
            colors=colors,
            startangle=90
        )
        ax1.axis('equal')
        ax1.set_title('Vulnerability Severity Distribution')
        
        # Use a unique ID for this chart
        chart_id = "severity_pie_chart"
        chart_ids.append(chart_id)
        
        # Display the figure with a copy button
        st_fig = st.pyplot(fig1)
        st_fig_html = str(st_fig)
        st.markdown(add_copy_button_to_figure(st_fig_html, chart_id), unsafe_allow_html=True)
        
        # Age Distribution
        st.markdown("<h3>Age Distribution</h3>", unsafe_allow_html=True)
        fig2, ax2 = plt.subplots(figsize=(10, 6))
        colors = ['#2ecc71', '#f39c12', '#e74c3c']
        bars = ax2.bar(age_df['Age'], age_df['Count'], color=colors)
        ax2.set_ylabel('Number of Vulnerabilities')
        ax2.set_title('Vulnerability Age Distribution')
        
        # Add percentage labels
        for bar in bars:
            height = bar.get_height()
            percentage = f"{100 * height / total_vulns:.1f}%"
            ax2.text(bar.get_x() + bar.get_width()/2., height + 1,
                    f"{height}\n({percentage})", ha='center', va='bottom')
        
        # Use a unique ID for this chart
        chart_id = "age_chart"
        chart_ids.append(chart_id)
        
        # Display the figure with a copy button
        st_fig = st.pyplot(fig2)
        st_fig_html = str(st_fig)
        st.markdown(add_copy_button_to_figure(st_fig_html, chart_id), unsafe_allow_html=True)
        
        # Top Vulnerability Types
        st.markdown("<h3>Top Vulnerability Types</h3>", unsafe_allow_html=True)
        fig3, ax3 = plt.subplots(figsize=(10, 6))
        bars = ax3.barh(vuln_type_df['Type'][::-1], vuln_type_df['Count'][::-1], color='#3498db')
        ax3.set_xlabel('Number of Vulnerabilities')
        ax3.set_title('Top Vulnerability Types')
        
        # Add percentage labels
        for bar in bars:
            width = bar.get_width()
            percentage = f"{100 * width / total_vulns:.1f}%"
            ax3.text(width + 1, bar.get_y() + bar.get_height()/2, 
                    f"{width} ({percentage})", va='center')
        
        # Use a unique ID for this chart
        chart_id = "vuln_types_chart"
        chart_ids.append(chart_id)
        
        # Display the figure with a copy button
        st_fig = st.pyplot(fig3)
        st_fig_html = str(st_fig)
        st.markdown(add_copy_button_to_figure(st_fig_html, chart_id), unsafe_allow_html=True)
        
        # Remediation Status
        st.markdown("<h3>Remediation Status</h3>", unsafe_allow_html=True)
        fig4, ax4 = plt.subplots(figsize=(10, 6))
        colors = ['#2ecc71', '#f39c12', '#e74c3c']
        bars = ax4.bar(remediation_df['Status'], remediation_df['Count'], color=colors)
        ax4.set_ylabel('Number of Vulnerabilities')
        ax4.set_title('Remediation Status')
        
        # Add percentage labels
        for bar in bars:
            height = bar.get_height()
            percentage = f"{100 * height / total_vulns:.1f}%"
            ax4.text(bar.get_x() + bar.get_width()/2., height + 1,
                    f"{height}\n({percentage})", ha='center', va='bottom')
        
        # Use a unique ID for this chart
        chart_id = "remediation_chart"
        chart_ids.append(chart_id)
        
        # Display the figure with a copy button
        st_fig = st.pyplot(fig4)
        st_fig_html = str(st_fig)
        st.markdown(add_copy_button_to_figure(st_fig_html, chart_id), unsafe_allow_html=True)
        
        # Add a "Copy All" button
        st.markdown(copy_all_button(chart_ids), unsafe_allow_html=True)
        
        # Risk insights
        st.markdown("<h2 class='sub-header'>Risk Insights</h2>", unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Critical vulnerability insight
            if critical_pct > 10:
                st.markdown(f"""
                <div class='alert-card'>
                    <h3>Critical Vulnerability Concern</h3>
                    <p>{critical_vulns} critical vulnerabilities ({critical_pct:.1f}% of total) represent a significant risk to the organization.</p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class='success-card'>
                    <h3>Critical Vulnerabilities Within Threshold</h3>
                    <p>Critical vulnerabilities represent {critical_pct:.1f}% of the total, within acceptable risk thresholds.</p>
                </div>
                """, unsafe_allow_html=True)
        
        with col2:
            # Age insight
            if gt_90_days > total_vulns * 0.15:
                st.markdown(f"""
                <div class='alert-card'>
                    <h3>Aging Vulnerabilities</h3>
                    <p>{gt_90_days} vulnerabilities ({old_vulns_pct:.1f}% of total) are older than 90 days, indicating a need for improved remediation processes.</p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class='success-card'>
                    <h3>Effective Vulnerability Management</h3>
                    <p>Only {old_vulns_pct:.1f}% of vulnerabilities are older than 90 days, indicating effective remediation processes.</p>
                </div>
                """, unsafe_allow_html=True)
        
        # System Distribution
        st.markdown("<h3>Most Vulnerable Systems</h3>", unsafe_allow_html=True)
        fig5, ax5 = plt.subplots(figsize=(10, 6))
        bars = ax5.barh(system_df['System'][::-1], system_df['Count'][::-1], color='#9b59b6')
        ax5.set_xlabel('Number of Vulnerabilities')
        ax5.set_title('Most Vulnerable Systems')
        
        # Add percentage labels
        for bar in bars:
            width = bar.get_width()
            percentage = f"{100 * width / total_vulns:.1f}%"
            ax5.text(width + 1, bar.get_y() + bar.get_height()/2, 
                    f"{width} ({percentage})", va='center')
        
        # Use a unique ID for this chart
        chart_id = "system_chart"
        chart_ids.append(chart_id)
        
        # Display the figure with a copy button
        st_fig = st.pyplot(fig5)
        st_fig_html = str(st_fig)
        st.markdown(add_copy_button_to_figure(st_fig_html, chart_id), unsafe_allow_html=True)
        
        # Executive summary
        st.markdown("<h2 class='sub-header'>Executive Summary</h2>", unsafe_allow_html=True)
        
        # Generate default summary
        default_summary = f"""
        The organization has {total_vulns} identified vulnerabilities with {critical_vulns} ({critical_pct:.1f}%) rated as critical. 
        {remediated} vulnerabilities have been successfully remediated ({remediated_pct:.1f}% of total), with {in_progress} ({in_progress_pct:.1f}%) 
        in active remediation. Top vulnerability categories include {vuln_type_list[0]} and {vuln_type_list[1]}, 
        primarily affecting {system_list[0]} and {system_list[1]}. {gt_90_days} vulnerabilities ({old_vulns_pct:.1f}%) are older than 90 days, 
        indicating a need for improved remediation processes.
        """
        
        # Let users edit the summary
        edited_summary = st.text_area("Edit Executive Summary", value=default_summary, height=150, key="vulnerability_summary_editor")
        
        # Display the edited summary
        st.markdown(f"<div class='insight-card'>{edited_summary}</div>", unsafe_allow_html=True)